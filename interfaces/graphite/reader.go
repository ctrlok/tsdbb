package graphite

import (
	"bufio"
	"io"
	"io/ioutil"
	"net"
	"net/url"

	"github.com/ctrlok/tsdbb/interfaces"
	"github.com/davecgh/go-spew/spew"
)

// Metric is a
type Metric [12]byte

// Internal is tuple method for Metric interface
func (m *Metric) Internal() interface{} {
	return ""
}

// PregeneratedMetrics is a struct which contain Metric, and generated by TSDB.GenerateMetrics
type PregeneratedMetrics struct {
	metrics []Metric
	err     error
}

// Metric return metric or out of index error
func (p *PregeneratedMetrics) Metric(i int) (interfaces.Metric, error) {
	if i >= len(p.metrics) {
		m := Metric{}
		return &m, p.err
	}
	return &p.metrics[i], nil
}

// TSDB is a main generator of graphite Metric and Sender
type TSDB struct {
	GeneratorPrefix []byte
	DevNull         bool
}

// func (t *TSDB) GenerateMetrics(i int) interfaces.PregeneratedMetrics {

// 	var n1, n2, n3, n4 int = 0, 0, 0, 0
// 	for n := 0; n < i; n++ {
// 		// if n5 > 99 {
// 		// 	n5, n4 = 0, n4+1
// 		// }
// 		if n4 > 99 {
// 			n4, n3 = 0, n3+1
// 		}
// 		if n3 > 99 {
// 			n3, n2 = 0, n2+1
// 		}
// 		if n2 > 99 {
// 			n2, n1 = 0, n1+1
// 		}
// 		p.metrics[n][0] = itoa(n1)
// 		p.metrics[n][1] = itoa(n2)
// 		p.metrics[n][2] = itoa(n3)
// 		p.metrics[n][3] = itoa(n4)
// 		// p.metrics[n][4] = itoa(n5)
// 		n4++
// 	}
// 	return &p
// }

// GenerateMetrics is a method for create PregeneratedMetrics
func (t *TSDB) GenerateMetrics(i int) interfaces.PregeneratedMetrics {
	p := PregeneratedMetrics{}
	p.metrics = make([]Metric, i)
	for n := range p.metrics[0] {
		p.metrics[0][n] = 48
	}
	for n := 1; n < i; n++ {
		var plus byte = 1
		p.metrics[n][0] = 46
		for k := 11; k > 0; k-- {
			if k%3 == 0 {
				p.metrics[n][k] = 46
				continue
			}
			if plus == 1 {
				if p.metrics[n-1][k] == 57 {
					p.metrics[n][k] = 48
				} else {
					p.metrics[n][k] = p.metrics[n-1][k] + plus
					plus = 0
				}
			} else {
				p.metrics[n][k] = p.metrics[n-1][k]
			}
		}
	}
	return &p
}

// NewSender will create new sender
func (t *TSDB) NewSender(uri *url.URL) (s interfaces.Sender, err error) {
	sender := Sender{}
	if t.DevNull {
		// sender.f, _ = os.OpenFile("/tmp/metricTEst", os.O_RDWR, 0755)
		sender.f = ioutil.Discard
		sender.w = bufio.NewWriterSize(sender.f, 4*1024)
		return &sender, nil
	}
	addr, err := net.ResolveTCPAddr(uri.Scheme, uri.Host)
	if err != nil {
		return nil, err
	}
	conn, err := net.DialTCP(uri.Scheme, nil, addr)
	spew.Dump(conn)
	if err != nil {
		return nil, err
	}
	sender.f = conn
	sender.w = bufio.NewWriter(sender.f)
	return &sender, err
}

// Sender is a sender instance.
type Sender struct {
	w      *bufio.Writer
	f      io.Writer
	prefix []byte

	host string
}

var helpNum = []byte{32, 49, 32}

// Send is a method for sending messages. Work only with internal Metric
func (s *Sender) Send(metric interfaces.Metric, t []byte) (err error) {
	m := metric.(*Metric)
	_, err = s.w.Write(s.prefix)
	if err != nil {
		return err
	}
	_, err = s.w.Write(m[0:])
	if err != nil {
		return err
	}
	_, err = s.w.Write(helpNum)
	if err != nil {
		return err
	}
	_, err = s.w.Write(t)
	return err
}

// GetHost will return host of sender
func (s *Sender) GetHost() string {
	return s.host
}

package graphite

import (
	"bufio"
	"io"
	"io/ioutil"
	"net/url"
	"time"

	"github.com/ctrlok/tsdbb/interfaces"
)

// Metric is a
type Metric [4][2]byte

// Internal is tuple method for Metric interface
func (m *Metric) Internal() interface{} {
	return ""
}

// PregeneratedMetrics is a struct which contain Metric, and generated by TSDB.GenerateMetrics
type PregeneratedMetrics struct {
	metrics []Metric
	err     error
}

// Metric return metric or out of index error
func (p *PregeneratedMetrics) Metric(i int) (interfaces.Metric, error) {
	if i >= len(p.metrics) {
		return &Metric{}, p.err
	}
	return &p.metrics[i], nil
}

// TSDB is a main generator of graphite Metric and Sender
type TSDB struct {
	GeneratorPrefix []byte
	DevNull         bool
}

// GenerateMetrics is a method for create PregeneratedMetrics
func (t *TSDB) GenerateMetrics(i int) interfaces.PregeneratedMetrics {
	p := PregeneratedMetrics{}
	p.metrics = make([]Metric, i)
	for i := range p.metrics[0] {
		p.metrics[0][i][0] = 48
		p.metrics[0][i][1] = 48
	}
	for n := 1; n < i; n++ {
		var plus byte = 1
		for k := 3; k > -1; k-- {
			for m := 1; m > -1; m-- {
				if plus == 1 {
					if p.metrics[n-1][k][m] == 57 {
						p.metrics[n][k][m] = 48
					} else {
						p.metrics[n][k][m] = p.metrics[n-1][k][m] + plus
						plus = 0
					}
				} else {
					p.metrics[n][k][m] = p.metrics[n-1][k][m]
				}
			}
		}
	}
	return &p
}

// NewSender will create new sender
func (t *TSDB) NewSender(uri *url.URL) (s interfaces.Sender, err error) {
	if t.DevNull {
		return t.newSenderNull(uri)
	}
	return t.newSenderNull(uri)
}
func (t *TSDB) newSenderNull(uri *url.URL) (s interfaces.Sender, err error) {
	var sender SenderNull
	// sender.f, _ = os.OpenFile("/tmp/metricTEst", os.O_RDWR, 0755)
	sender.f = ioutil.Discard
	sender.w = bufio.NewWriter(sender.f)
	return &sender, nil
}

// func (t *TSDB) newSenderUri(uri *url.URL) (s interfaces.Sender, err error) {
// }

// SenderNull is a sender instance.
type SenderNull struct {
	f      io.Writer
	w      *bufio.Writer
	prefix []byte

	host string
}

// Send is a method for sending messages. Work only with internal Metric
func (s *SenderNull) Send(metric interfaces.Metric, t *time.Time) (err error) {
	m := metric.(*Metric)
	_, err = s.w.Write(s.prefix)
	if err != nil {
		return err
	}
	for i := 0; i < 4; i++ {
		err = s.w.WriteByte(46) // dot
		if err != nil {
			return err
		}
		err = s.w.WriteByte(m[i][0])
		if err != nil {
			return err
		}
		err = s.w.WriteByte(m[i][1])
		if err != nil {
			return err
		}
		// s.w.Flush()
	}
	err = s.w.WriteByte(10) // newline
	return err
}

// GetHost will return host of sender
func (s *SenderNull) GetHost() string {
	return s.host
}
